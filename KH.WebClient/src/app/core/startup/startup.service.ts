import { HttpClient } from '@angular/common/http';
import { EnvironmentProviders, Injectable, Provider, inject, provideAppInitializer } from '@angular/core';
import { Router } from '@angular/router';
import { ACLService } from '@delon/acl';
import { ALAIN_I18N_TOKEN, Menu, MenuService, SettingsService, TitleService } from '@delon/theme';
import { NzSafeAny } from 'ng-zorro-antd/core/types';
import { Observable, zip, catchError, map } from 'rxjs';

import { I18NService } from '../i18n/i18n.service';

/**
 * Used for application startup
 * Generally used to get the basic data of the application, like: Menu Data, User Data, etc.
 */
export function provideStartup(): Array<Provider | EnvironmentProviders> {
  return [
    StartupService,
    provideAppInitializer(() => {
      const initializerFn = (
        (startupService: StartupService) => () =>
          startupService.load()
      )(inject(StartupService));
      return initializerFn();
    })
  ];
}

@Injectable()
export class StartupService {
  private menuService = inject(MenuService);
  private settingService = inject(SettingsService);
  private aclService = inject(ACLService);
  private titleService = inject(TitleService);
  private httpClient = inject(HttpClient);
  private router = inject(Router);
  private i18n = inject<I18NService>(ALAIN_I18N_TOKEN);

  private originalMenu: Menu[] = [];

  load(): Observable<void> {
    const defaultLang = this.i18n.defaultLang;
    // If http request allows anonymous access, you need to add `ALLOW_ANONYMOUS`:
    // this.httpClient.get('/app', { context: new HttpContext().set(ALLOW_ANONYMOUS, this.tokenService.get()?.token ? false : true) })
    return zip(this.i18n.loadLangData(defaultLang), this.httpClient.get('./assets/tmp/app-data.json')).pipe(
      // Receive exception messages generated by other interceptors
      catchError(res => {
        console.warn(`StartupService.load: Network request failed`, res);
        setTimeout(() => this.router.navigateByUrl(`/exception/500`));
        return [];
      }),
      map(([langData, appData]: [Record<string, string>, NzSafeAny]) => {

        // Store original menu for later filtering
        this.originalMenu = appData.menu;

        // Check for stored user data (from previous session)
        const storedUser = this.settingService.user;

        if (storedUser?.permissions) {
          // Apply permissions from storage
          // this.aclService.setAbility(storedUser.permissions);
          this.filterMenuByPermissions();
        } else {
          // Use static user for initial load
          // this.settingService.setUser(appData.user);
          // this.aclService.setFull(false);
        }


        // setting language data
        this.i18n.use(defaultLang, langData);

        // Application info: including site name, description, year
        this.settingService.setApp(appData.app);
        // User info: including name, avatar, email address
        // this.settingService.setUser(appData.user); 
        // ACL: set permissions to full
        // this.aclService.setFull(true);

        // // Set actual permissions (instead of setFull(true))
        // this.aclService.setAbility(realUser.permissions);

        // Initialize menu
        // this.menuService.add(appData.menu);
        // After setting user/permissions
        // this.menuService.add(generateMenuBasedOnUser(realUser));

        // Set the suffix for the page title
        this.titleService.default = '';
        this.titleService.suffix = appData.app.name;
      })
    );
  }

  public filterMenuByPermissions(): void {
    const filteredMenu = this.filterMenuItems(this.originalMenu);
    this.menuService.clear();
    this.menuService.add(filteredMenu);
  }

  private filterMenuItems(menuItems: Menu[]): Menu[] {
    return menuItems
      .map(item => ({ ...item })) // Shallow clone
      .filter(item => {
        // Filter group headers and items without ACL
        if (item.group || !item.acl) return true;
        
        // Check ACL permission
        return this.aclService.can(item.acl);
      })
      .map(item => {
        // Process child items recursively
        if (item.children) {
          item.children = this.filterMenuItems(item.children);
        }
        return item;
      });
  }
}
